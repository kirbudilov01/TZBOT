import logging
import sqlite3
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from docx import Document
import openai

# API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")  
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not API_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω
if not API_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("tz_database.db")
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    business_goal TEXT,
    key_features TEXT,
    integrations TEXT,
    target_audience TEXT,
    monetization TEXT,
    additional_questions TEXT,
    generated_tz TEXT
)''')
conn.commit()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    business_goal = State()
    key_features = State()
    integrations = State()
    target_audience = State()
    monetization = State()
    additional = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –±–æ—Ç–∞. –ù–∞—á–Ω–µ–º —Å –≥–ª–∞–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: –ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ç.–¥.)")
    await Form.business_goal.set()

# –í–æ–ø—Ä–æ—Å 1: –¶–µ–ª—å –±–∏–∑–Ω–µ—Å–∞
@dp.message_handler(state=Form.business_goal, content_types=[types.ContentType.TEXT, types.ContentType.VOICE])
async def process_business_goal(message: types.Message, state: FSMContext):
    if message.voice:
        file = await bot.get_file(message.voice.file_id)
        text = "(–ê—É–¥–∏–æ-–æ—Ç–≤–µ—Ç: —Å–º. –∑–∞–ø–∏—Å—å)"
    else:
        text = message.text
    async with state.proxy() as data:
        data['business_goal'] = text
    await message.answer("–ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –±–æ—Ç–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä: —á–∞—Ç, CRM-—Å–∏—Å—Ç–µ–º–∞, –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)")
    await Form.key_features.set()

# –í–æ–ø—Ä–æ—Å 2: –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
@dp.message_handler(state=Form.key_features)
async def process_key_features(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['key_features'] = message.text
    await message.answer("–ö–∞–∫–∏–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏–ª–∏ API –≤–∞–º –Ω—É–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å? (–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, CRM, AI-–±–æ—Ç—ã, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)")
    await Form.integrations.set()

# –í–æ–ø—Ä–æ—Å 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
@dp.message_handler(state=Form.integrations)
async def process_integrations(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['integrations'] = message.text
    await message.answer("–ö—Ç–æ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è? (–ù–∞–ø—Ä–∏–º–µ—Ä: –º–∞–ª—ã–π –±–∏–∑–Ω–µ—Å, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã, –∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)")
    await Form.target_audience.set()

# –í–æ–ø—Ä–æ—Å 4: –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
@dp.message_handler(state=Form.target_audience)
async def process_target_audience(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['target_audience'] = message.text
    await message.answer("–ö–∞–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç? (–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥–ø–∏—Å–∫–∞, —Ä–∞–∑–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞, freemium-–º–æ–¥–µ–ª—å)")
    await Form.monetization.set()

# –í–æ–ø—Ä–æ—Å 5: –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è
@dp.message_handler(state=Form.monetization)
async def process_monetization(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['monetization'] = message.text
    await generate_tz(message, state)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –¢–ó
async def generate_tz(message, state):
    async with state.proxy() as data:
        document = Document()
        document.add_heading("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ", level=1)
        document.add_paragraph(f"üìå –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å: {data['business_goal']}")
        document.add_paragraph(f"üîπ –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {data['key_features']}")
        document.add_paragraph(f"üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {data['integrations']}")
        document.add_paragraph(f"üéØ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {data['target_audience']}")
        document.add_paragraph(f"üí∞ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è: {data['monetization']}")
        
        file_path = f"tz_{message.from_user.id}.docx"
        document.save(file_path)
        
        with open(file_path, "rb") as file:
            await message.answer("–°–ø–∞—Å–∏–±–æ! –í–æ—Ç –≤–∞—à–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:")
            await bot.send_document(message.chat.id, file)
        
        os.remove(file_path)
    await state.finish()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
